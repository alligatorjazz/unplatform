---
interface Props {
	definition: string;
}
const { definition } = Astro.props;
const buzzwordId = crypto.randomUUID();
// TODO: replace with proper intersectionObserver api - current solution is unstable
---

<span
	id={buzzwordId}
	title={definition}
	tabindex="0"
	class="cursor-help relative group drop-shadow-none"
>
	<span
		class="group-hover:hover:brightness-125 text-accent underline decoration-dotted drop-shadow-none"
		><slot /><sup class="text-accent">?</sup></span
	>
</span>

<style is:global>
	.buzzword-card {
		display: flex;
		position: fixed;
		top: 0;
		right: 0;
		z-index: 10;
		padding: 2rem;
		justify-content: center;
		align-items: center;
		width: 100dvw;
		height: 100dvh;
		transition-property: all;
		transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
		transition-duration: 300ms;
		transform: translateX(100%);
		pointer-events: none;
	}

	.buzzword-card[data-active] {
		transform: translateX(0);
		pointer-events: auto;
		backdrop-filter: blur(16px);
	}

	.buzzword-card p {
		background-color: var(--color-bg);
		padding: 1rem;
		border-width: 1px;
		width: 32rem;
		max-width: 90%;
	}
</style>

<script is:inline define:vars={{ buzzwordId, definition }}>
	document.addEventListener("DOMContentLoaded", () => {
		const buzzword = document.getElementById(buzzwordId);
		const cardContainer = document.createElement("div");
		cardContainer.classList.add("buzzword-card");
		const cardText = document.createElement("p");
		cardText.innerText = definition;
		cardContainer.appendChild(cardText);
		document.body.appendChild(cardContainer);

		if (!buzzword || !cardContainer || !cardText) {
			throw new Error(
				`Could not activate definition card for definition ${definition}.\n${{ cardContainer, cardText }}`
			);
		}

		buzzword.addEventListener("pointerdown", () => {
			// console.log("activating buzzword")
			cardContainer.dataset["active"] = "true";
		});
		cardContainer.addEventListener("pointerdown", () => {
			delete cardContainer.dataset["active"];
		});
	});
</script>
